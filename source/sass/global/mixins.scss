/*
Функция обрезающая единицы измерения и возвращающая число
@param {Number}
@return {Number}
*/

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}
@function em($values...) {
  $context: strip-units(nth($values, length($values)));
  $result: ();
  $separator: list_separator($values);

  @for $i from 1 through length($values) - 1 {
    $value: nth($values, $i);

    @if type-of($value) == 'number' {
      $value: strip-units($value);
      $result: append($result, $value / $context * 1em, $separator);
    }

    @else if type-of($value) == 'list' {
      $result: append($result, em(append($value, $context)...), $separator);
    }
    @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@mixin range-track {
  position: relative;
  width: 100%;
  height: em(6, $fz);
  margin-top: em(20, $fz);

  border: em(1, $fz) solid $white;
  border-radius: $border_radius;
  background: $color_range;
}

@mixin range-thumb {
  width: em(24, $fz);
  height: em(24, $fz);
  margin-top: em(-12, $fz);

  cursor: pointer;

  border: em(3, $fz) solid $border;
  border-radius: 50%;
  background: $light_accent;
  appearance: none;
}

@mixin range-focus {
  border-color: $white;
  background: $dark_gray;
}


